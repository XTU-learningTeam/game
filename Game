
#include<iostream>
#include<string>
#include<stdlib.h>
#include<stdio.h>
#include<windows.h>
#include<time.h>
#include <conio.h>
using namespace std;
#define Size 15
#define maxsmall 7
#define smallroad 6
#define mouse 4
#define start 2
#define end 3
#define wall 1
#define road 0
#define up 0
#define down 1
#define left 2
#define right 3
#define Esc 5
bool iftime=false;
const int Max=1000;

class Cirqueue							//循环队列
{
public :
	Cirqueue(){front=rear=Max-1;}
	void Enqueue(int x)					//入列
	{
        if((rear+1)%Max==front)
			cout<<"Queue Full"<<endl;
		else
		{
			rear=(rear+1)%Max;
			data[rear]=x;
		}
	}
	int Dequeue()						//出列
	{
		if(rear==front)
			return 0;
		else
		{

			front=(front+1)%Max;
			return data[front];
		}
	}
	int empty()							//判断列是否为空
	{
		if(rear==front)
			return 0;
		return 1;
	}
	void deleteall()
	{
		while(empty()!=0)
		{
			Dequeue();
		}
	}
private:
	int front,rear;
	int data[Max];
};Cirqueue q;

class Map
{
private:
	char maparr[Size+1][Size+1];
    int direction;

public:
    Map();
	int count;
	void creatmap(int x,int y);
	void meungame(int number);
	void startpaint();
	void creatall();
	int startgame();
	void roaddisplay();
	void smallroaddisplay(int x,int y);
	void display(int i,int j);
	int walk();
};
void meun();
void gameexplain();
void remove(int x,int y) 					//控制输出字符的位置
{
	COORD coord;							//字符在控制台屏幕上的坐标
	coord.X=x;
	coord.Y=y;
	SetConsoleCursorPosition( GetStdHandle( STD_OUTPUT_HANDLE ), coord );
}
void hidden()								//隐藏光标
{
  	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO cci;								//控制台光标的信息
	GetConsoleCursorInfo(hOut,&cci);						//检索光标的可见性和大小
	cci.bVisible=0;
	SetConsoleCursorInfo(hOut,&cci);
}
HANDLE hThread1;											//创建一个工作线程
DWORD WINAPI Thread1(LPVOID lpParameter)					//指向线程函数的指针
{
	int i=30;
	iftime=false;
	while(1)
	{
		remove(2,17);
		printf("\r\t%02d",i);
		if(i==0)
		{
			iftime=true;
			TerminateThread(hThread1, 0);					//强制终止线程
			CloseHandle(hThread1);							//关闭线程句柄
			break;
		}
		Sleep(1000);										//1秒（倒计时）
		i--;
	}
	return 0;
}
int main()
{
	char choich;//定义一个字符进行选择
	while(true)
	{
		int number=1;
		hidden();//调用函数隐藏光标
		meun();//调用函数菜单
		cin>>choich;//输入字符
		int select,flag=0;//定义整数
		string go;
		switch(choich)
		{
		case '1'://选择开始游戏
		    system("cls");//清屏
			while(true)
			{
				Map map;
				map.creatall();//调用随机算子函数生成迷宫地图的墙
				flag=0;
				while(true)
				{
					map.meungame(number);
					system("cls");
					map.startpaint();//生成路
					cout<<"====================="<<endl;
					cout<<"........倒计时......."<<endl;
					hThread1 = CreateThread(NULL, 0, Thread1, NULL, 0, NULL);//调用线程
					Sleep(1000);
					select=map.startgame();//
					if(select==1 && iftime==false)
					{
						map.roaddisplay();//人物移动
						TerminateThread(hThread1, 0);
						CloseHandle(hThread1);
						remove(2,18);
						cout<<"......恭喜你成功走出迷宫......"<<endl;
						while(true)
						{
							cout<<"查看最短路径ok"<<endl;
							cout<<"是否继续闯关yes/no"<<endl;
							cin>>go;
							if(go=="yes")//下一关
							{
								flag=0;
								number++;
							}
							else if(go=="no")//退出
								flag=1;
							else if(go=="ok")
							{
								flag=-1;
								system("cls");
								map.smallroaddisplay((Size+1)/2,(Size+1)/2);//搜索最短路径
								cout<<endl;
								system("pause");
							}
							else
							{
								flag=-1;
								cout<<"输入不合法,请重新输入"<<endl;
							}
							if(flag==1||flag==0)
								break;
						}
						if(flag==1||flag==0)
							break;
					}
					if(select==-1 && iftime==true)
					{
						TerminateThread(hThread1, 0);
						CloseHandle(hThread1);
						remove(2,18);
						cout<<"未在规定时间内走出迷宫，游戏失败"<<endl;
						cout<<"是否想要重来一次（yes） 或 退出（no）"<<endl;
						while(cin>>go)//继续
						{
							if(go=="yes")
							{
							    flag=0;
								q.deleteall();
								break;
							}
							else if(go=="no")
							{
								flag=1;
								break;
							}
							else
								cout<<"输入不合法,请重新输入"<<endl;
						}
					}
					if(select==0||flag==1)
					{
						TerminateThread(hThread1, 0);//终止线程
						CloseHandle(hThread1);//关闭线程
						break;
					}
				}
				if(flag==1||select==0)
				{
				system("cls");
					break;
				}
			}
			break;
		case '2'://进入游戏说明
			gameexplain();//调用函数游戏说明
			system("cls");//清屏
			break;
		case '3'://退出游戏
			exit(0);
			break;
		default:
			cout<<"输入不合法,请重新输入"<<endl;
		    system("pause");
			system("cls");
			break;
		}
	}
    return 0;
}
void meun()
{

	cout<<"——·——·——·——·——·——·——·——·——·——·——·——"<<endl;
    cout<<"                                                          "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"                  欢 迎 进 入 迷 宫 游 戏                 "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"                      1 . 开 始 游 戏                     "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"                      2 . 帮       助                     "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"                      3 . 退 出 游 戏                     "<<endl;
	cout<<"                                                          "<<endl;
    cout<<"                                                          "<<endl;
	cout<<"                                                          "<<endl;
	cout<<"——·——·——·——·——·——·——·——·——·——·——·——"<<endl;
}
void gameexplain()
{
	system("cls");
	cout<<"——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·"<<endl;
    cout<<"                                                         "<<endl;
	cout<<"                                                         "<<endl;
	cout<<"         1.键盘方向键控制行走                            "<<endl;
	cout<<"                                                         "<<endl;
	cout<<"            up向上                                       "<<endl;
	cout<<"            down向下                                     "<<endl;
	cout<<"            left向左                                     "<<endl;
	cout<<"            right向右                                    "<<endl;
	cout<<"                                                         "<<endl;
	cout<<"         2.在规定时间内走出迷宫则游戏成功，否则游戏失败  "<<endl;
	cout<<"                                                         "<<endl;
    cout<<"         3.关卡难度会随关卡数量增加而增加                "<<endl;
	cout<<"                                                         "<<endl;
	cout<<"         4.若游戏中途想退出，请按ESC键                   "<<endl;
	cout<<"                                                         "<<endl;
	cout<<"——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·——·"<<endl;
	system("pause");
}
void Map::meungame(int number)
{
	system("cls");
	count=number;
	cout<<" ........................................"<<endl;
	cout<<"                                         "<<endl;
	cout<<"           第"<<count<<"关               "<<endl;
	cout<<"                                         "<<endl;
	cout<<"........................................."<<endl;
	system("pause");
}
Map::Map()
{
	int i,j;
	count=0;
	for(i=1;i<=Size;i++)
		for(j=1;j<=Size;j++)
			maparr[i][j]=wall;  //初始默认都是墙
}
void Map::startpaint()
{
	maparr[(Size+1)/2][(Size+1)/2]=mouse;
	maparr[Size-1][Size]=end;
	for(int i=1;i<=Size;i++)
	{
		for(int j=1;j<=Size;j++)
		{
			if(maparr[i][j]==mouse && (i!=(Size+1)/2 || j!=(Size+1)/2))  //在角色周围生成道路
				maparr[i][j]=road;
			//	cout<<maparr[i][j]<<endl;
			display(i,j);

		}
		cout<<endl;
	}
}
void Map::display(int i,int j) //地图元素
{
	remove(2*j-2,i-1);
	switch(maparr[i][j])
	{
	case start:
		cout<<"入";
		break;
	case end:
		cout<<"出";
		break;
	case wall:
		cout<<"■";
		break;
	case road:
		cout<<"  ";
		break;
	case mouse :
		cout<<"♀";
		break;
	case smallroad:
		cout<<"*";
		break;
	case maxsmall:
		cout<<"@";
		break;
	}
}
void Map::creatmap(int x,int y)  //生成地图
{
	int c[4][2]={0,1,1,0,0,-1,-1,0};
	int i,j,t;
	for(i=0;i<4;i++)
	{
		j=rand()%4;
		t=c[i][0];c[i][0]=c[j][0];c[j][0]=t;
		t=c[i][1];c[i][1]=c[j][1];c[j][1]=t;
	}
	maparr[x][y]=road;
	for(i=0;i<4;i++)
		if(maparr[x+2*c[i][0]][y+2*c[i][1]]==wall)
		{
			maparr[x+c[i][0]][y+c[i][1]]=road;
			creatmap(x+2*c[i][0],y+2*c[i][1]); //递归生成道路，保证至少有一条通路
		}
}
void Map::creatall()  //随机算子生成墙
{
	srand((unsigned)time(NULL));
	creatmap(2*(rand()%(Size/2)+1),2*(rand()%(Size/2)+1));

}
int Map::walk()
{
	char c;
	while(c=getch())
	{
		if(c==27) return Esc;         //根据字符值返回相应操作
		if(c==72) return left;
		if(c==80) return right;
		if(c==75) return up;
		if(c==77) return down;
	}
	return -1;
}
int Map::startgame()
{
	int x=(Size+1)/2;
	int y=(Size+1)/2;
	int flag=0,select;
	while(iftime!=true)
	{
		select=walk();                //调用walk函数得到要进行的操作
		q.Enqueue(x);                 //当前位置入队
		q.Enqueue(y);
		switch(select)
		{
		case up:
			if(maparr[x][y-1]!=wall)  //上方非墙
			{
				maparr[x][y]=road;    //经过的地方变回路
				maparr[x][y-1]=mouse; //更新mouse位置
				display(x,y);         //打印(x,y)处符号
				display(x,y-1);
				y--;
			}
			break;
		case down:
			if(maparr[x][y+1]!=wall)
			{
				maparr[x][y]=road;
				maparr[x][y+1]=mouse;
				display(x,y);
				display(x,y+1);
				y++;
			}
			break;
		case left:
			if(maparr[x-1][y]!=wall)
			{
				maparr[x][y]=road;
				maparr[x-1][y]=mouse;
				display(x,y);
				display(x-1,y);
				x--;
			}
			break;
		case right:
			if(maparr[x+1][y]!=wall)
			{
				maparr[x][y]=road;
				maparr[x+1][y]=mouse;
				display(x,y);
				display(x+1,y);
				x++;
			}
			break;
		case Esc:
			flag=1;
			break;
		default:
			break;
		}
		if(maparr[Size-1][Size]==mouse||flag==1)
			break;
		if(iftime==true)
			return -1;
	}
	if(flag==1)
		return 0;
	return 1;
}
void Map::roaddisplay()
{
	int x,y;
	while(true)
	{
		x=q.Dequeue();     //把之前移动时入对的位置出队
		y=q.Dequeue();
		maparr[x][y]=6;    //对应6的符号
		if(x==0)
			break;
		else
		{
			display(x,y);
			maparr[x][y]=road;
		}
	}
}
void Map::smallroaddisplay(int x,int y)
{
	int direction[][2]={{0,1},{1,0},{0,-1},{-1,0}};//四个方向
	int p=0,i=0,j=0;                      //初始为0
	int arr[100]={0};
	int brr[100]={0};
	int record[100]={0};
	int visited[Size+1][Size+1]={0};//初始：全部未访问
	arr[p]=x;
	brr[p]=y;              			//定位人物位置
	maparr[x][y]=road;              //初始位置为路
	while(true)
	{
		i=i+1;
		if(i<=4)
		{
			x=arr[p]+direction[i-1][0];          //试探各个方向
			y=brr[p]+direction[i-1][1];
			if(y<=Size && x<=Size)               //仍在迷宫里
			{
				if(maparr[x][y]==road && visited[x][y]==0)//未访问的&可访问的路
				{
					p++;                          //p不断增
					record[p]=i;                  //记录访问p值
					arr[p]=x;
					brr[p]=y;					 //更新
					visited[x][y]=1;             //记录该点
					i=0;						//i变回0
				}
			}
		}
		else
		{
			i=record[p];               //重新调整
			p--;
		}
		if(x==Size-1 && y==Size-1)
			break;                        //结束
	}
	for(j=1;j<=p;j++)                    //p次
			maparr[arr[j]][brr[j]]=7;
	for(int k=1;k<=Size;k++)             //迷宫display
		for( j=1;j<=Size;j++)
			display(k,j);
}
